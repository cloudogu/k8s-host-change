// Code generated by mockery v2.20.0. DO NOT EDIT.

package hosts

import (
	mock "github.com/stretchr/testify/mock"
	corev1 "k8s.io/api/core/v1"

	v1 "k8s.io/api/apps/v1"
)

// mockHostAliasPatcher is an autogenerated mock type for the hostAliasPatcher type
type mockHostAliasPatcher struct {
	mock.Mock
}

type mockHostAliasPatcher_Expecter struct {
	mock *mock.Mock
}

func (_m *mockHostAliasPatcher) EXPECT() *mockHostAliasPatcher_Expecter {
	return &mockHostAliasPatcher_Expecter{mock: &_m.Mock}
}

// Patch provides a mock function with given fields: deployments, aliases
func (_m *mockHostAliasPatcher) Patch(deployments []v1.Deployment, aliases []corev1.HostAlias) {
	_m.Called(deployments, aliases)
}

// mockHostAliasPatcher_Patch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Patch'
type mockHostAliasPatcher_Patch_Call struct {
	*mock.Call
}

// Patch is a helper method to define mock.On call
//   - deployments []v1.Deployment
//   - aliases []corev1.HostAlias
func (_e *mockHostAliasPatcher_Expecter) Patch(deployments interface{}, aliases interface{}) *mockHostAliasPatcher_Patch_Call {
	return &mockHostAliasPatcher_Patch_Call{Call: _e.mock.On("Patch", deployments, aliases)}
}

func (_c *mockHostAliasPatcher_Patch_Call) Run(run func(deployments []v1.Deployment, aliases []corev1.HostAlias)) *mockHostAliasPatcher_Patch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]v1.Deployment), args[1].([]corev1.HostAlias))
	})
	return _c
}

func (_c *mockHostAliasPatcher_Patch_Call) Return() *mockHostAliasPatcher_Patch_Call {
	_c.Call.Return()
	return _c
}

func (_c *mockHostAliasPatcher_Patch_Call) RunAndReturn(run func([]v1.Deployment, []corev1.HostAlias)) *mockHostAliasPatcher_Patch_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTnewMockHostAliasPatcher interface {
	mock.TestingT
	Cleanup(func())
}

// newMockHostAliasPatcher creates a new instance of mockHostAliasPatcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockHostAliasPatcher(t mockConstructorTestingTnewMockHostAliasPatcher) *mockHostAliasPatcher {
	mock := &mockHostAliasPatcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
