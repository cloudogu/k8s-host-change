// Code generated by mockery v2.20.0. DO NOT EDIT.

package main

import (
	mock "github.com/stretchr/testify/mock"
	kubernetes "k8s.io/client-go/kubernetes"

	registry "github.com/cloudogu/cesapp-lib/registry"
)

// mockInitializer is an autogenerated mock type for the initializer type
type mockInitializer struct {
	mock.Mock
}

type mockInitializer_Expecter struct {
	mock *mock.Mock
}

func (_m *mockInitializer) EXPECT() *mockInitializer_Expecter {
	return &mockInitializer_Expecter{mock: &_m.Mock}
}

// CreateCesRegistry provides a mock function with given fields:
func (_m *mockInitializer) CreateCesRegistry() (registry.Registry, error) {
	ret := _m.Called()

	var r0 registry.Registry
	var r1 error
	if rf, ok := ret.Get(0).(func() (registry.Registry, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() registry.Registry); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(registry.Registry)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockInitializer_CreateCesRegistry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCesRegistry'
type mockInitializer_CreateCesRegistry_Call struct {
	*mock.Call
}

// CreateCesRegistry is a helper method to define mock.On call
func (_e *mockInitializer_Expecter) CreateCesRegistry() *mockInitializer_CreateCesRegistry_Call {
	return &mockInitializer_CreateCesRegistry_Call{Call: _e.mock.On("CreateCesRegistry")}
}

func (_c *mockInitializer_CreateCesRegistry_Call) Run(run func()) *mockInitializer_CreateCesRegistry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockInitializer_CreateCesRegistry_Call) Return(_a0 registry.Registry, _a1 error) *mockInitializer_CreateCesRegistry_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockInitializer_CreateCesRegistry_Call) RunAndReturn(run func() (registry.Registry, error)) *mockInitializer_CreateCesRegistry_Call {
	_c.Call.Return(run)
	return _c
}

// CreateClientSet provides a mock function with given fields:
func (_m *mockInitializer) CreateClientSet() (kubernetes.Interface, error) {
	ret := _m.Called()

	var r0 kubernetes.Interface
	var r1 error
	if rf, ok := ret.Get(0).(func() (kubernetes.Interface, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() kubernetes.Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(kubernetes.Interface)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockInitializer_CreateClientSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateClientSet'
type mockInitializer_CreateClientSet_Call struct {
	*mock.Call
}

// CreateClientSet is a helper method to define mock.On call
func (_e *mockInitializer_Expecter) CreateClientSet() *mockInitializer_CreateClientSet_Call {
	return &mockInitializer_CreateClientSet_Call{Call: _e.mock.On("CreateClientSet")}
}

func (_c *mockInitializer_CreateClientSet_Call) Run(run func()) *mockInitializer_CreateClientSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockInitializer_CreateClientSet_Call) Return(_a0 kubernetes.Interface, _a1 error) *mockInitializer_CreateClientSet_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockInitializer_CreateClientSet_Call) RunAndReturn(run func() (kubernetes.Interface, error)) *mockInitializer_CreateClientSet_Call {
	_c.Call.Return(run)
	return _c
}

// GetNamespace provides a mock function with given fields:
func (_m *mockInitializer) GetNamespace() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// mockInitializer_GetNamespace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNamespace'
type mockInitializer_GetNamespace_Call struct {
	*mock.Call
}

// GetNamespace is a helper method to define mock.On call
func (_e *mockInitializer_Expecter) GetNamespace() *mockInitializer_GetNamespace_Call {
	return &mockInitializer_GetNamespace_Call{Call: _e.mock.On("GetNamespace")}
}

func (_c *mockInitializer_GetNamespace_Call) Run(run func()) *mockInitializer_GetNamespace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockInitializer_GetNamespace_Call) Return(_a0 string) *mockInitializer_GetNamespace_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockInitializer_GetNamespace_Call) RunAndReturn(run func() string) *mockInitializer_GetNamespace_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTnewMockInitializer interface {
	mock.TestingT
	Cleanup(func())
}

// newMockInitializer creates a new instance of mockInitializer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockInitializer(t mockConstructorTestingTnewMockInitializer) *mockInitializer {
	mock := &mockInitializer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
